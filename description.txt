ОПИСАНИЕ:
Обзор:
Идея этой задачи состоит в том, чтобы создать два класса, 
Молекула и Атом, которые позволят нам, используя набор методов, 
построить числовые эквиваленты органических соединений 
и восстановить некоторые из их простейших свойств, например, молекулярную массу и исходную формулу.
В процессе нам потребуется реализовать некоторые классы исключений.


@ Класс Molecule
    Это главный объект, представляющий всю молекулу, 
    ее свойства и атомы и содержащий все связанные методы для построения и модификации объекта молекулы.

    Требуемые свойства/геттеры:
        Чтобы получить необработанную формулу конечной молекулы в виде строки 
        например: "C4H10", "C5H10O2BrClS",; 
        см. подробное поведение и дополнительную информацию ниже:
            self.formula

        Чтобы получить значение молекулярной массы конечной молекулы в г/моль в виде двойного значения 
        (см. подробное поведение и дополнительную информацию ниже):
            self.molecular_weight

        Чтобы получить список объектов Atom. Атомы добавляются в список в порядке их создания:
            self.atoms

        Чтобы получить имя молекулы, конечно, в виде строки, если оно задано в конструкторе (по умолчанию: пустая строка):
            self.name

    Требуемые методы:
        Конструктор(ы):
            С или без имени молекулы в качестве аргумента (в виде строки):
                m = Molecule()
                m = Molecule(name)

    Модификаторы:

        Метод brancher(x, y, z, ...) (ветвь):
            1. Может принимать любое количество аргументов, положительные целые числа.
            2. Добавляет новые «ветви» к текущей молекуле.
            3. Каждый аргумент дает количество атомов углерода в новой ветви.
            В экземпляре Molecule «ветвь» представляет собой цепочку атомов, связанных вместе. 
            Когда создается ветвь, все ее атомы представляют собой углероды. 
            Каждая «ветвь» Молекулы идентифицируется номером, который соответствует порядку ее создания: 
            первая созданная ветвь имеет номер 1, вторая — номер 2, ...

        Метод m.bounder((c1,b1,c2,b2),...) (связь):
            Создает новые связи между двумя атомами существующих ветвей.
            Каждый аргумент представляет собой кортеж из четырех целых чисел, что дает:
                c1 и b1: положение углерода и разветвления первого атома
                c2 и b2: углерод и разветвления второго атома
            Все позиции имеют индекс 1, что означает, что (1,1,5,3) свяжет первый углерод первой ветви с пятым углеродом третьей ветви.
            Будут использоваться только положительные целые числа.

        Метод m.mutate((nc,nb,elt), ...) (мутация):
            Мутирует углерод nc в ветви nb на химический элемент elt (данный в виде строки).
            Не забывайте, что атомы углерода и ответвления имеют индекс 1.
            Это мутация: идентификатор экземпляра Atom остается прежним. См. спецификации класса Atom об этом.

        Метод m.add((nc,nb,elt), ...) (добавление):
            Добавляет новый атом вида elt (строка) на углерод nc в ветке nb.
            Добавленные таким образом атомы не считаются частью ветви, с которой они связаны, и не считаются новой ветвью молекулы.

        Метод m.add_chaining (nc, nb, elt1, elt2, ...) (добавление целой цепочки):
            Добавляет к углероду nc в ответвлении nb цепь со всеми указанными элементами в указанном порядке. 
            Значение: m.add_chaining(2, 5, "N", "C", "C", "Mg", "Br") добавит цепочку ...-N-C-C-Mg-Br к 2ому атому в 5ой ветви.
            Что касается метода add, то эта цепочка не считается новой ветвью молекулы.
    
        Метод m.close() (заблокировать):
            Завершает создание экземпляра молекулы, 
            добавляя недостающие атомы водорода везде и блокируя объект (см. часть поведения ниже).

        Метод m.unlock() (разблокировать):
            Делает молекулу снова изменчивой.
            Водороды должны быть удалены, а также любая пустая ветвь, с которой вы можете столкнуться в процессе.
            После того, как молекула была «разблокирована», если по какой-либо причине у нее не осталось ни одной ветки, 
            сгенерируйте исключение EmptyMolecule.
            Идентификационные номера оставшихся атомов должны снова быть непрерывными (начиная с 1), 
            сохраняя порядок, в котором они были, когда молекула была заперта.
            Если после удаления атомов водорода у вас останутся какие-то атомы, 
            никак не связанные с ветвями разблокированной молекулы, все равно сохраните их в экземпляре Molecule.
            После разблокировки молекула должна быть снова модифицирована любым способом.

    Связанное поведение:
        Методы, которые включают в себя создание молекул или мутирующих молекулярных объектов, 
        должны быть цепочечными (например: molec = Molecule("octane").brancher(8).closer()).

        Построение молекулы состоит в изменении исходного объекта при каждом вызове метода.

        Исключение InvalidBond должно вызываться каждый раз, когда вы сталкиваетесь со случаем, 
        когда атом превышает свой номер валентности или ограничен самим собой (о числе валентности см. дополнительную информацию ниже).

        Когда метод выдает исключение, в то время как у него все еще есть несколько аргументов/атомов, 
        которые нужно обработать, модификации, полученные в результате допустимых предыдущих операций, 
        должны быть сохранены, но все аргументы после ошибки игнорируются.

        Особый случай с add_chaining: если в какой-то момент при добавлении цепочки возникает ошибка, 
        все ее атомы должны быть удалены из экземпляра (даже допустимые).

        Целостность всей молекулы должна защищать от любой ошибки, а это означает, 
        что должна быть возможность корректно работать с объектом-молекулой даже после того, как он выдал исключение.

        Поля формулы и молекулярного_веса или связанные геттеры 
        должны генерировать исключение UnlockedMolecule, если пользователь пытается получить к ним доступ, 
        пока молекула не заблокирована 
        поскольку мы не хотим, чтобы пользователь перехватывал незавершенные/инвалидные идентификационная информация.

        Аналогичным образом попытки модификации молекулы после того, как она была заблокирована, 
        должны вызвать исключение LockedMolecule (метод close также следует этому поведению).

    Дополнительная информация:
        Необработанная формула органических соединений:
            Необработанная формула дает количество каждого вида химического элемента в молекуле. 
            Есть несколько возможных правил, когда речь идет о порядке атомов в исходной формуле. 
            Здесь мы будем использовать следующие: C, H, O, затем другие элементы в алфавитном порядке.
            Примеры: «C4H10» вместо бутана, «C5H10O2BrClS», ... Обратите внимание, что единицы не появляются (Br, а не Br1).

        Валентность атома:
            Число валентности атома — это количество связей, которые он может удерживать. Не меньше, не больше.
            Примечание: мы будем использовать все атомы с наинизшей возможной валентностью, когда возможны несколько. 
            Это означает, что число валентности для S будет равно 2, для P - 3,.
            Точно так же невозможные связи из-за геометрических критериев, 
            таких как будет разрешена четверная связь между двумя атомами углерода.
        
        Молекулярный вес:
            Молекулярная масса молекулы представляет собой сумму атомных масс всех ее атомов.

        Вся информация о валентности и атомных массах находятся в класса Atom, 
        в виде словаря, где ключем является элемент 'C', 'O', 'Br',..., а значением - кортеж:
        (валентность, атомная масса)

@ Класс Atom
    Экземпляры этого класса представляют атомы в конкретном экземпляре Molecule и их связи с другими экземплярами Atom.

    Требуемые свойства:
        Чтобы получить химический символ в виде строки ("C", "Br", "O",...):
            self.element

        Чтобы получить идентификационный номер этого атома:
            self.id
        
        Идентификационный номер — это целое число, которое позволяет отслеживать все атомы одной и той же молекулы, 
        начиная с 1 (шаг один для любого нового экземпляра Atom).

    Требуемые методы:
        __hash__ # Предоставлено. Не изменяйте этот метод
        __eq__ # Предоставлено. Не изменяйте этот метод
        Как вы увидите при реализации этих двух методов, все атомы считаются отличными друг от друга в экземпляре Molecule.

        __str__:
            Возвращает строку в следующем формате: "Atom(element.id: element1id,element2id,element3id...)".
            element: символ текущего экземпляра Atom.
            id: идентификатор текущего элемента (начиная с 1 для каждого экземпляра Molecule).
            element1id: element1, связанный с текущим атомом и его идентификационным номером. 
            Если связанный атом представляет собой водород, не отображайте его идентификационный номер для повышения удобочитаемости.
            Элементы, связанные с текущим атомом, должны быть отсортированы в том же порядке, 
            что и в исходной формуле, за исключением того, что атомы водорода будут идти в конец, опять же для лучшей читаемости.
            Атомы одного и того же химического элемента сортируются по возрастанию значения их идентификационного номера.
            Если атом не связан ни с каким другим атомом, просто верните часть element.id: "Atom(H.12)".

            Примеры: "Atom(C.2: C3,C14,O6,H)" или "Atom(C.24: C1,O6,N2,H)", или "Atom(C.1)".

@ Заключительные примечания:
    Мы можем добавить любой метод или поле к двум объектам и организовать/спроектировать все это так, 
    как мы предпочитаем, если объекты соответствуют приведенным выше контрактам.

    Тесты будут вызывать только свойства/методы, описанные в настоящих контрактах.

    Методы всегда будут получать веские аргументы, учитывая количество атомов углерода или ветвей, или символы химических элементов.

    Экземпляры Atom никогда не будут изменяться непосредственно во время тестов, все делается через класс Molecule.
    
    Что касается необходимых классов исключений, мы можете реализовать подклассы, если хотите, 
    но их имена должны содержать имя того, которое изначально ожидалось.