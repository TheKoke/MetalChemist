@test.describe("Simple chains / impact of the number of C")
def _():

    @test.it("methane")
    def _():
    
        molec = "methane"
        expected = {'C': 1, 'H': 4}
        draw = """

CH4

"""     
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 1, 'H': 4}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 1, 'H': 4}, "Wrong result for methane")
        
    
    
    
    @test.it("ethane")
    def _():
        draw = """
    
CH3-CH3
    
    """
        molec = "ethane"
        expected = {'C': 2, 'H': 6}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 2, 'H': 6}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 2, 'H': 6}, "Wrong result for ethane")
    
    
    
    
    @test.it("butane")
    def _():
        draw = """
    
CH3-CH2-CH2-CH3
    
    """
        molec = "butane"
        expected = {'C': 4, 'H': 10}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 4, 'H': 10}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 4, 'H': 10}, "Wrong result for butane")
    
    
    
    
    @test.it("decane")
    def _():
        draw = """
    
CH3-CH2-CH2-CH2-CH2-CH2-CH2-CH2-CH2-CH3
    
    """
        molec = "decane"
        expected = {'C': 10, 'H': 22}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 10, 'H': 22}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 10, 'H': 22}, "Wrong result for decane")
    
    
    
    
    
    
    
    
@test.describe("Simple ramifications")
def _():  
    
    
    @test.it("REFERENCE: C8H18 (octane)")
    def _():
        draw = """
    
CH3-CH2-CH2-CH2-CH2-CH2-CH2-CH3
    
    """
        molec = "octane"
        expected = {'C': 8, 'H': 18}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 8, 'H': 18}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 8, 'H': 18}, "Wrong result for octane")
    
    
    
    
    @test.it("One ramification")
    def _():
        draw = """
    
        CH2-CH3
        |
CH3-CH2-CH-CH2-CH2-CH3
    
    """
        molec = "3-ethylhexane"
        expected = {'C': 8, 'H': 18}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 8, 'H': 18}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 8, 'H': 18}, "Wrong result for 3-ethylhexane")
    
    
    
    
    @test.it("Two ramifications")
    def _():
        draw = """
    
   CH3  CH2-CH3
    |   |
CH3-CH-CH-CH2-CH3
    
    """
        molec = "3-ethyl-2-methylpentane"
        expected = {'C': 8, 'H': 18}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 8, 'H': 18}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 8, 'H': 18}, "Wrong result for 3-ethyl-2-methylpentane")
    
    
    
    
    @test.it("Two ramifications on the same C")
    def _():
        draw = """
    
        CH2-CH3
        |
CH3-CH2-C-CH2-CH3
        |
        CH3
    
    """
        molec = "3-ethyl-3-methylpentane"
        expected = {'C': 8, 'H': 18}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 8, 'H': 18}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 8, 'H': 18}, "Wrong result for 3-ethyl-3-methylpentane")
    
    
    
    
    @test.it("Handle multipliers")
    def _():
        draw = """
    
        CH3
        |
CH3-CH2-C-CH2-CH2-CH3
        |
        CH3
    
    """
        molec = "3,3-dimethylhexane"
        expected = {'C': 8, 'H': 18}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 8, 'H': 18}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 8, 'H': 18}, "Wrong result for 3,3-dimethylhexane")
    
    
    
    
    @test.it("Handle multipliers")
    def _():
        draw = """
    
 CH3   CH3
   \\   /
CH3-C-C-CH3
   /   \\
 CH3   CH3 
    
    """
        molec = "2,2,3,3-tetramethylbutane"
        expected = {'C': 8, 'H': 18}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 8, 'H': 18}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 8, 'H': 18}, "Wrong result for 2,2,3,3-tetramethylbutane")
    
    
    
    
    
    
    
    
@test.describe("Effect of cycles and multiple bonds")
def _():
    
    
    @test.it("REFERENCE: C8H16 (cyclooctane)")
    def _():
        draw = """
    
 CH2-CH2-CH2-CH2
 |           |
 CH2-CH2-CH2-CH2
    
    """
        molec = "cyclooctane"
        expected = {'C': 8, 'H': 16}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 8, 'H': 16}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 8, 'H': 16}, "Wrong result for cyclooctane")
    
    
    
    
    @test.it("One cycle of size 6 and one ramification")
    def _():
        draw = """
    
 CH2-CH2-CH-CH2-CH3
 |       |
 CH2-CH2-CH2  
    
    """
        molec = "1-ethylcyclohexane"
        expected = {'C': 8, 'H': 16}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 8, 'H': 16}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 8, 'H': 16}, "Wrong result for 1-ethylcyclohexane")
    
    
    
    
    @test.it("One cycle of size 4 and several ramifications")
    def _():
        draw = """
    
 CH2-CH-CH2-CH3
 |   |
 CH2-C-CH3
     |
     CH3 
    
    """
        molec = "1-ethyl-2,2-dimethylcyclobutane"
        expected = {'C': 8, 'H': 16}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 8, 'H': 16}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 8, 'H': 16}, "Wrong result for 1-ethyl-2,2-dimethylcyclobutane")
    
    
    
    
    @test.it("One double bond: at an extremity")
    def _():
        draw = """
    
CH2=CH-CH2-CH2-CH2-CH2-CH2-CH3
    
    """
        molec = "oct-1-ene"
        expected = {'C': 8, 'H': 16}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 8, 'H': 16}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 8, 'H': 16}, "Wrong result for oct-1-ene")
        
    
    
    
    @test.it("One double bond: anywhere in the chain")
    def _():
        draw = """
    
CH3-CH2-CH=CH-CH2-CH2-CH2-CH3 
    
    """
        molec = "oct-3-ene"
        expected = {'C': 8, 'H': 16}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 8, 'H': 16}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 8, 'H': 16}, "Wrong result for oct-3-ene")
    
    
    
    
    @test.it("One double bond: elision of the position '-1-'")
    def _():
        draw = """
    
CH2=CH-CH2-CH2-CH2-CH2-CH2-CH3
    
    """
        molec = "octene"
        expected = {'C': 8, 'H': 16}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 8, 'H': 16}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 8, 'H': 16}, "Wrong result for octene")
    
    
    
    
    
    
    
    
@test.describe("Effect of mutliple bonds and cycles, part 2")
def _():
    
    
    @test.it("Double bonds")
    def _():
        draw = """
    
CH3-CH=CH-CH2-CH=CH-CH2-CH3
    
    """
        molec = "oct-2,5-diene"
        expected = {'C': 8, 'H': 14}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 8, 'H': 14}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 8, 'H': 14}, "Wrong result for oct-2,5-diene")
    
    
    
    
    @test.it("Triple bond: at an extremity")
    def _():
        draw = """
    
CH{=}C-CH2-CH2-CH2-CH2-CH2-CH3      "{=}" used as triple bond (should be 3 lines)
    
    """
        molec = "oct-1-yne"
        expected = {'C': 8, 'H': 14}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 8, 'H': 14}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 8, 'H': 14}, "Wrong result for oct-1-yne")
    
    
    
    
    @test.it("Triple bond: in the chain")
    def _():
        draw = """
    
CH3-C{=}C-CH2-CH2-CH2-CH2-CH3
    
    """
        molec = "oct-2-yne"
        expected = {'C': 8, 'H': 14}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 8, 'H': 14}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 8, 'H': 14}, "Wrong result for oct-2-yne")
    
    
    
    
    @test.it("Triple bond: elision of the position")
    def _():
        draw = """
    
CH{=}C-CH2-CH2-CH2-CH2-CH2-CH3
    
    """
        molec = "octyne"
        expected = {'C': 8, 'H': 14}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 8, 'H': 14}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 8, 'H': 14}, "Wrong result for octyne")
    
    
    
    
    @test.it("Mix of cycles and multiple bonds")
    def _():
        draw = """
        
 CH2-CH2-CH-CH2-CH3
 |       |
 CH=CH-CH2   
        
        """
        molec = "3-ethylcyclohexene"
        expected = {'C': 8, 'H': 14}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 8, 'H': 14}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 8, 'H': 14}, "Wrong result for 3-ethylcyclohexene")
        
        
        
        
        
        
        
    
@test.describe("Simple functions: oxygen")
def _():
    
    
    @test.it("REFERENCE: C5H12 (pentane)")
    def _():
        draw = """
        
CH3-CH2-CH2-CH2-CH3
        
        """
        molec = "pentane"
        expected = {'C': 5, 'H': 12}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 5, 'H': 12}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 5, 'H': 12}, "Wrong result for pentane")
        
        
        
        
    @test.it("pentanol")
    def _():
        draw = """
        
CH3-CH2-CH2-CH2-CH2-OH
        
        """
        molec = "pentanol"
        expected = {'C': 5, 'H': 12, 'O': 1}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 5, 'H': 12, 'O': 1}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 5, 'H': 12, 'O': 1}, "Wrong result for pentanol")
        
        
        
        
    @test.it("pentan-2-ol")
    def _():
        draw = """
        
    OH
    |
CH3-CH-CH2-CH2-CH3
        
        """
        molec = "pentan-2-ol"
        expected = {'C': 5, 'H': 12, 'O': 1}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 5, 'H': 12, 'O': 1}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 5, 'H': 12, 'O': 1}, "Wrong result for pentan-2-ol")
        
        
        
        
    @test.it("pentan-2,4-diol")
    def _():
        draw = """
        
    OH     OH
    |      |
CH3-CH-CH2-CH-CH3
        
        """
        molec = "pentan-2,4-diol"
        expected = {'C': 5, 'H': 12, 'O': 2}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 5, 'H': 12, 'O': 2}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 5, 'H': 12, 'O': 2}, "Wrong result for pentan-2,4-diol")
        
        
        
        
    @test.it("pentanal")
    def _():
        draw = """
        
CH3-CH2-CH2-CH2-CH=O
        
        """
        molec = "pentanal"
        expected = {'C': 5, 'H': 10, 'O': 1}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 5, 'H': 10, 'O': 1}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 5, 'H': 10, 'O': 1}, "Wrong result for pentanal")
        
        
        
        
    @test.it("pentan-2-one")
    def _():
        draw = """
        
    O
    ||
CH3-C-CH2-CH2-CH3
        
        """
        molec = "pentan-2-one"
        expected = {'C': 5, 'H': 10, 'O': 1}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 5, 'H': 10, 'O': 1}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 5, 'H': 10, 'O': 1}, "Wrong result for pentan-2-one")
        
        
        
        
    @test.it("pentandial")
    def _():
        draw = """
        
O=CH-CH2-CH2-CH2-CH=O
        
        """
        molec = "pentandial"
        expected = {'C': 5, 'H': 8, 'O': 2}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 5, 'H': 8, 'O': 2}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 5, 'H': 8, 'O': 2}, "Wrong result for pentandial")
        
        
        
        
    @test.it("pentan-2,4-dione")
    def _():
        draw = """
        
    O     O
    ||    ||
CH3-C-CH2-C-CH3
        
        """
        molec = "pentan-2,4-dione"
        expected = {'C': 5, 'H': 8, 'O': 2}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 5, 'H': 8, 'O': 2}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 5, 'H': 8, 'O': 2}, "Wrong result for pentan-2,4-dione")
        
        
        
        
        
        
        
        
@test.describe("Simple functions: halogens")
def _():
        
        
    @test.it("REFERENCE: C5H12 (pentane)")
    def _():
        draw = """
        
CH3-CH2-CH2-CH2-CH3
        
        """
        molec = "pentane"
        expected = {'C': 5, 'H': 12}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 5, 'H': 12}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 5, 'H': 12}, "Wrong result for pentane")
        
        
        
        
    @test.it("1-fluoropentane")
    def _():
        draw = """
        
CH3-CH2-CH2-CH2-CH2-F
        
        """
        molec = "1-fluoropentane"
        expected = {'C': 5, 'F': 1, 'H': 11}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 5, 'F': 1, 'H': 11}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 5, 'F': 1, 'H': 11}, "Wrong result for 1-fluoropentane")
        
        
        
        
    @test.it("2-chloropentane")
    def _():
        draw = """
        
    Cl
    |
CH3-CH-CH2-CH2-CH3
        
        """
        molec = "2-chloropentane"
        expected = {'C': 5, 'Cl': 1, 'H': 11}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 5, 'Cl': 1, 'H': 11}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 5, 'Cl': 1, 'H': 11}, "Wrong result for 2-chloropentane")
        
        
        
        
    @test.it("1-bromo-4-chloropentane")
    def _():
        draw = """
        
    Cl
    |
CH3-CH-CH2-CH2-CH2-Br
        
        """
        molec = "1-bromo-4-chloropentane"
        expected = {'Br': 1, 'C': 5, 'Cl': 1, 'H': 10}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'Br': 1, 'C': 5, 'Cl': 1, 'H': 10}")
        test.assert_equals(ParseHer(molec).parse(), {'Br': 1, 'C': 5, 'Cl': 1, 'H': 10}, "Wrong result for 1-bromo-4-chloropentane")
        
        
        
        
        
        
        
        
@test.describe("Simple functions: nitrogen")
def _():
        
        
    @test.it("REFERENCE: C6H14 (hexane)")
    def _():
        draw = """
        
CH3-CH2-CH2-CH2-CH2-CH3
        
        """
        molec = "hexane"
        expected = {'C': 6, 'H': 14}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 6, 'H': 14}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 6, 'H': 14}, "Wrong result for hexane")
        
        
        
        
    @test.it("hexylamine")
    def _():
        draw = """
        
CH3-CH2-CH2-CH2-CH2-CH2-NH2
        
        """
        molec = "hexylamine"
        expected = {'C': 6, 'H': 15, 'N': 1}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 6, 'H': 15, 'N': 1}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 6, 'H': 15, 'N': 1}, "Wrong result for hexylamine")
        
        
        
        
    @test.it("butylethylamine")
    def _():
        draw = """
        
CH3-CH2-CH2-CH2-NH-CH2-CH3
        
        """
        molec = "butylethylamine"
        expected = {'C': 6, 'H': 15, 'N': 1}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 6, 'H': 15, 'N': 1}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 6, 'H': 15, 'N': 1}, "Wrong result for butylethylamine")
        
        
        
        
    @test.it("ethylmethylpropylamine")
    def _():
        draw = """
        
            CH3
            |
CH3-CH2-CH2-N-CH2-CH3
        
        """
        molec = "ethylmethylpropylamine"
        expected = {'C': 6, 'H': 15, 'N': 1}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 6, 'H': 15, 'N': 1}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 6, 'H': 15, 'N': 1}, "Wrong result for ethylmethylpropylamine")
        
        
        
        
    @test.it("triethylamine")
    def _():
        draw = """
        
N(CH2-CH3)3
        
        """
        molec = "triethylamine"
        expected = {'C': 6, 'H': 15, 'N': 1}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 6, 'H': 15, 'N': 1}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 6, 'H': 15, 'N': 1}, "Wrong result for triethylamine")
        
        
        
        
    @test.it("Alternative nomenclature: hexan-1,6-diamine")
    def _():
        draw = """
        
NH2-CH2-CH2-CH2-CH2-CH2-CH2-NH2
        
        """
        molec = "hexan-1,6-diamine"
        expected = {'C': 6, 'H': 16, 'N': 2}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 6, 'H': 16, 'N': 2}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 6, 'H': 16, 'N': 2}, "Wrong result for hexan-1,6-diamine")
        
        
        
        
    @test.it("WARNING: amiDe, not amiNe, here!")
    def _():
        draw = """
        
                    O
                    ||
CH3-CH2-CH2-CH2-CH2-C-NH2
        
        """
        molec = "hexanamide"
        expected = {'C': 6, 'H': 13, 'N': 1, 'O': 1}
        
        print(molec + ":\n" + draw.strip("\n") + "\n" + "{'C': 6, 'H': 13, 'N': 1, 'O': 1}")
        test.assert_equals(ParseHer(molec).parse(), {'C': 6, 'H': 13, 'N': 1, 'O': 1}, "Wrong result for hexanamide")